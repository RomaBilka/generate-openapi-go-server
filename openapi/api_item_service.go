/*
 * Test REST API
 *
 * Task â„–3
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"database/sql"
	"errors"
	"net/http"

	"github.com/RomaBiliak/generate-openapi-go-server/database/dbs"
)

// ItemApiService is a service that implements the logic for the ItemApiServicer
// This service should implement the business logic for every endpoint for the ItemApi API.
// Include any external packages or services that will be required by this service.
type ItemApiService struct {
	queries *dbs.Queries
}

// NewItemApiService creates a default api service
func NewItemApiService(queries *dbs.Queries) ItemApiServicer {
	return &ItemApiService{queries: queries}
}

// ItemIdDelete - Deletes the item
func (s *ItemApiService) ItemIdDelete(ctx context.Context, id int64) (ImplResponse, error) {
	err := s.queries.DeleteItem(ctx, int32(id))

	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}

	return Response(http.StatusNoContent, nil), nil
}

// ItemIdGet - Find item by ID
func (s *ItemApiService) ItemIdGet(ctx context.Context, id int64) (ImplResponse, error) {
	item, err := s.queries.GetItemById(ctx, int32(id))

	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}

	if item.ID == 0 {
		return Response(http.StatusNotFound, nil), nil
	}

	return Response(http.StatusOK, item), nil
}

// ItemIdPut - Updates a item in the store with data
func (s *ItemApiService) ItemIdPut(ctx context.Context, id int64, createItemRequest CreateItemRequest) (ImplResponse, error) {

	item, err := s.queries.GetItemById(ctx, int32(id))

	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}

	if item.ID == 0 {
		return Response(http.StatusNotFound, nil), nil
	}

	idInDb, err := s.queries.CheckItemExists(ctx, createItemRequest.Name)
	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}

	if idInDb != int32(id) {
		return Response(http.StatusBadRequest, nil), errors.New("Item with that name already exists")
	}

	err = s.queries.UpdateItem(ctx, dbs.UpdateItemParams{createItemRequest.Name, createItemRequest.Value, int32(id)})

	if err != nil {
		return Response(http.StatusAccepted, nil), err
	}

	return Response(http.StatusBadRequest, nil), err
}

// ItemPost - Create a item in the store with data
func (s *ItemApiService) ItemPost(ctx context.Context, createItemRequest CreateItemRequest) (ImplResponse, error) {
	id, err := s.queries.CheckItemExists(ctx, createItemRequest.Name)
	if err != nil && err != sql.ErrNoRows {
		return Response(http.StatusBadRequest, nil), err
	}

	if id > 0 {
		return Response(http.StatusBadRequest, nil), errors.New("Item with that name already exists")
	}

	id, err = s.queries.CreateItem(ctx, dbs.CreateItemParams{createItemRequest.Name, createItemRequest.Value})

	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}

	return Response(http.StatusCreated, id), nil
}
