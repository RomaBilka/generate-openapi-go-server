/*
 * Test REST API
 *
 * Task â„–3
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ItemApiController binds http requests to an api service and writes the service results to the http response
type ItemApiController struct {
	service ItemApiServicer
	errorHandler ErrorHandler
}

// ItemApiOption for how the controller is set up.
type ItemApiOption func(*ItemApiController)

// WithItemApiErrorHandler inject ErrorHandler into controller
func WithItemApiErrorHandler(h ErrorHandler) ItemApiOption {
	return func(c *ItemApiController) {
		c.errorHandler = h
	}
}

// NewItemApiController creates a default api controller
func NewItemApiController(s ItemApiServicer, opts ...ItemApiOption) Router {
	controller := &ItemApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the ItemApiController
func (c *ItemApiController) Routes() Routes {
	return Routes{ 
		{
			"ItemIdDelete",
			strings.ToUpper("Delete"),
			"/item/{id}",
			c.ItemIdDelete,
		},
		{
			"ItemIdGet",
			strings.ToUpper("Get"),
			"/item/{id}",
			c.ItemIdGet,
		},
		{
			"ItemIdPut",
			strings.ToUpper("Put"),
			"/item/{id}",
			c.ItemIdPut,
		},
		{
			"ItemPost",
			strings.ToUpper("Post"),
			"/item",
			c.ItemPost,
		},
	}
}

// ItemIdDelete - Deletes the item
func (c *ItemApiController) ItemIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt64Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.ItemIdDelete(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ItemIdGet - Find item by ID
func (c *ItemApiController) ItemIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt64Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.ItemIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ItemIdPut - Updates a item in the store with data
func (c *ItemApiController) ItemIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt64Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	createItemRequestParam := CreateItemRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createItemRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateItemRequestRequired(createItemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ItemIdPut(r.Context(), idParam, createItemRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ItemPost - Create a item in the store with data
func (c *ItemApiController) ItemPost(w http.ResponseWriter, r *http.Request) {
	createItemRequestParam := CreateItemRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createItemRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateItemRequestRequired(createItemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ItemPost(r.Context(), createItemRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
