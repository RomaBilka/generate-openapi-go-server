/*
 * Test REST API
 *
 * Task â„–3
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

)

// ItemsApiController binds http requests to an api service and writes the service results to the http response
type ItemsApiController struct {
	service ItemsApiServicer
	errorHandler ErrorHandler
}

// ItemsApiOption for how the controller is set up.
type ItemsApiOption func(*ItemsApiController)

// WithItemsApiErrorHandler inject ErrorHandler into controller
func WithItemsApiErrorHandler(h ErrorHandler) ItemsApiOption {
	return func(c *ItemsApiController) {
		c.errorHandler = h
	}
}

// NewItemsApiController creates a default api controller
func NewItemsApiController(s ItemsApiServicer, opts ...ItemsApiOption) Router {
	controller := &ItemsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the ItemsApiController
func (c *ItemsApiController) Routes() Routes {
	return Routes{ 
		{
			"ItemsGet",
			strings.ToUpper("Get"),
			"/items",
			c.ItemsGet,
		},
	}
}

// ItemsGet - All items
func (c *ItemsApiController) ItemsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ItemsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
