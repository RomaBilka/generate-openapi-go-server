// Code generated by sqlc. DO NOT EDIT.
// source: items.sql

package dbs

import (
	"context"
)

const checkItemExists = `-- name: CheckItemExists :one
SELECT id
FROM items
WHERE name = $1
`

func (q *Queries) CheckItemExists(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, checkItemExists, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createItem = `-- name: CreateItem :one
INSERT INTO items (name, value)
VALUES ($1, $2)
RETURNING id
`

type CreateItemParams struct {
	Name  string
	Value string
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createItem, arg.Name, arg.Value)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const getItemById = `-- name: GetItemById :one
SELECT id, name, value
FROM items
WHERE id = $1
`

func (q *Queries) GetItemById(ctx context.Context, id int32) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItemById, id)
	var i Item
	err := row.Scan(&i.ID, &i.Name, &i.Value)
	return i, err
}

const getItemByName = `-- name: GetItemByName :one
SELECT id, name, value
FROM items
WHERE name = $1
`

func (q *Queries) GetItemByName(ctx context.Context, name string) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItemByName, name)
	var i Item
	err := row.Scan(&i.ID, &i.Name, &i.Value)
	return i, err
}

const getItems = `-- name: GetItems :many
SELECT id, name, value
FROM items
`

func (q *Queries) GetItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(&i.ID, &i.Name, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :exec
UPDATE items SET name = $1, value = $2
WHERE id = $3
`

type UpdateItemParams struct {
	Name  string
	Value string
	ID    int32
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.ExecContext(ctx, updateItem, arg.Name, arg.Value, arg.ID)
	return err
}
